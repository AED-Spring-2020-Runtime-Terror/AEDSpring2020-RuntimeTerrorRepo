/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageAirliners;

import Business.Airliner;
import Business.Flight;
import Business.TravelAgency;
import java.awt.CardLayout;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author srush
 */
public class ManageAirlinerFightSchedJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageAirlinerFightSchedJPanel
     */
    private JPanel cardSequenceJPanel;
    private TravelAgency travelAgency;
    private Airliner airline;
    public ManageAirlinerFightSchedJPanel(JPanel cardSequenceJPanel, TravelAgency travelAgency, Airliner airline) {
        initComponents();
        this.travelAgency = travelAgency;
        this.airline = airline;
        this.cardSequenceJPanel = cardSequenceJPanel;
        populateFlightOfAirline(airline);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updateFltBtn = new javax.swing.JButton();
        flightNumberTxt = new javax.swing.JTextField();
        cancelBtn = new javax.swing.JButton();
        insertNewFliTxt = new javax.swing.JButton();
        searchComboBox = new javax.swing.JComboBox<>();
        labelHead = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightSchTable = new javax.swing.JTable();
        backBtnFliSch = new javax.swing.JButton();
        SearchBtn = new javax.swing.JButton();

        updateFltBtn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        updateFltBtn.setText("Update Flight Details");
        updateFltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFltBtnActionPerformed(evt);
            }
        });

        cancelBtn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cancelBtn.setText("Cancel Flight");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        insertNewFliTxt.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        insertNewFliTxt.setText("Insert New Flight");
        insertNewFliTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertNewFliTxtActionPerformed(evt);
            }
        });

        searchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search By Flight Number", "Search By Departure Location", "Search By Arrival Location" }));
        searchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboBoxActionPerformed(evt);
            }
        });

        labelHead.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelHead.setText("Flight Schedule of Airliner NAME");

        flightSchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight Number", "Departure Location", "Arrival Location", "Departure Time", "Arrival Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(flightSchTable);

        backBtnFliSch.setText("<<Back");
        backBtnFliSch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnFliSchActionPerformed(evt);
            }
        });

        SearchBtn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        SearchBtn.setText("Search");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(79, 79, 79)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(insertNewFliTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(flightNumberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(72, 72, 72)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(updateFltBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(SearchBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(labelHead)))
                .addGap(140, 140, 140))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(backBtnFliSch)
                    .addContainerGap(765, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(labelHead)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchBtn)
                    .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flightNumberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateFltBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(insertNewFliTxt)
                .addGap(18, 18, 18)
                .addComponent(cancelBtn)
                .addGap(34, 34, 34))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(backBtnFliSch)
                    .addContainerGap(489, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateFltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFltBtnActionPerformed

         int selectedrow = flightSchTable.getSelectedRow();
        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        } else {
               Flight flight = (Flight) flightSchTable.getValueAt(selectedrow, 0);
               UpdateFlightJPanel updateFlightJPanel = new UpdateFlightJPanel(cardSequenceJPanel, travelAgency, flight,airline);
               cardSequenceJPanel.add("UpdateFlightJPanel", updateFlightJPanel);
                CardLayout cardLayout = (CardLayout) cardSequenceJPanel.getLayout();
                cardLayout.next(cardSequenceJPanel);
        }
    }//GEN-LAST:event_updateFltBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed

        int selectedrow = flightSchTable.getSelectedRow();
        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        } else {

            Flight flight = (Flight) flightSchTable.getValueAt(selectedrow, 0);
            airline.getFlightSchedule().getFlights().remove(flight);
            travelAgency.getMasterSchedule().getFlights().remove(flight);

            populateFlightOfAirline(airline);

        }
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void insertNewFliTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertNewFliTxtActionPerformed
        InsertNewFlightJPanel insertNewFlightJPanel = new InsertNewFlightJPanel(cardSequenceJPanel, travelAgency,airline);
        cardSequenceJPanel.add("InsertNewFlightJPanel", insertNewFlightJPanel);
        CardLayout cardLayout = (CardLayout) cardSequenceJPanel.getLayout();
        cardLayout.next(cardSequenceJPanel);
    }//GEN-LAST:event_insertNewFliTxtActionPerformed

    private void searchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchComboBoxActionPerformed

    private void backBtnFliSchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnFliSchActionPerformed
        cardSequenceJPanel.remove(this);
        CardLayout cardLayout = (CardLayout) cardSequenceJPanel.getLayout();
        cardLayout.previous(cardSequenceJPanel);
    }//GEN-LAST:event_backBtnFliSchActionPerformed

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed

        String searchTxt = flightNumberTxt.getText();
        TravelAgency ta = TravelAgency.getInstance();

        String comboTxt = searchComboBox.getSelectedItem().toString();
        System.out.println("comboTxt :" + comboTxt);

        switch (comboTxt) {
            case "Search By Flight Number":
                Flight f = ta.searchFlightOnFlightNumber(searchTxt);
                populateSearchedFlight(f);
                break;

            case "Search By Departure Location":
                List<Flight> depFlightList = ta.searchFlightOnDepLocation(searchTxt);
                populateSearchedFlight(depFlightList);
                break;

            case "Search By Arrival Location":
                List<Flight> arrFlightList = ta.searchFlightOnArrLocation(searchTxt);
                populateSearchedFlight(arrFlightList);
                break;
        }
    }//GEN-LAST:event_SearchBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SearchBtn;
    private javax.swing.JButton backBtnFliSch;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField flightNumberTxt;
    private javax.swing.JTable flightSchTable;
    private javax.swing.JButton insertNewFliTxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelHead;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JButton updateFltBtn;
    // End of variables declaration//GEN-END:variables

    private void populateSearchedFlight(Flight a) {

        DefaultTableModel defaultTableModel = (DefaultTableModel) flightSchTable.getModel();
        defaultTableModel.setRowCount(0);
        Object[] row = new Object[defaultTableModel.getColumnCount()];

        row[0] = a;
        row[1] = a.getDeparture();
        row[2] = a.getDestination();
        row[3] = a.getDepartureTime();
        row[4] = a.getArrivalTime();

        defaultTableModel.addRow(row);

    }

    private void populateSearchedFlight(List<Flight> flightList) {

        DefaultTableModel defaultTableModel = (DefaultTableModel) flightSchTable.getModel();
        defaultTableModel.setRowCount(0);
        for (Flight flight : flightList) {
            Object[] row = new Object[defaultTableModel.getColumnCount()];

            row[0] = flight;
            row[1] = flight.getDeparture();
            row[2] = flight.getDestination();
            row[3] = flight.getDepartureTime();
            row[4] = flight.getArrivalTime();

            defaultTableModel.addRow(row);
        }

    }

    public void populateFlightOfAirline(Airliner airline) {

        DefaultTableModel defaultTableModel = (DefaultTableModel) flightSchTable.getModel();
        defaultTableModel.setRowCount(0);
        if (airline.getFlightSchedule() == null) {
            JOptionPane.showMessageDialog(null, "NO flights are present for this airline ");
        } else {
            for (Flight a : airline.getFlightSchedule().getFlights()) {
                Object[] row = new Object[defaultTableModel.getColumnCount()];

                row[0] = a;
                row[1] = a.getDeparture();
                row[2] = a.getDestination();
                row[3] = a.getDepartureTime();
                row[4] = a.getArrivalTime();

                defaultTableModel.addRow(row);
            }
        }
        String s = labelHead.getText().replaceFirst("NAME", airline.getAirlineName());
        labelHead.setText(s);
    }

}
